{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Addy\\\\OneDrive\\\\Documents\\\\React\\\\src\\\\components\\\\Regions.js\";\nimport React from \"react\";\nimport { Layer, Line } from \"react-konva\";\nimport useStore from \"../store\";\n\nfunction Regions() {\n  var _this = this;\n\n  var regions = useStore(function (s) {\n    return s.regions;\n  });\n  var layerRef = React.useRef(null);\n  var selectedId = useStore(function (s) {\n    return s.selectedRigionId;\n  });\n  var selectRegion = useStore(function (s) {\n    return s.selectRegion;\n  });\n  return /*#__PURE__*/React.createElement(Layer, {\n    ref: layerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, regions.map(function (region) {\n    var isSelected = region.id === selectedId;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: region.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      globalCompositeOperation: \"destination-out\",\n      points: region.points.flatMap(function (p) {\n        return [p.x, p.y];\n      }),\n      fill: \"black\",\n      listening: false,\n      closed: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      name: \"region\",\n      points: region.points.flatMap(function (p) {\n        return [p.x, p.y];\n      }),\n      fill: region.color,\n      closed: true,\n      opacity: isSelected ? 1 : 0.8,\n      onClick: function onClick() {\n        selectRegion(region.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }));\n  }));\n}\n\n;\nexport default Regions;","map":{"version":3,"sources":["C:/Users/Addy/OneDrive/Documents/React/src/components/Regions.js"],"names":["React","Layer","Line","useStore","Regions","regions","s","layerRef","useRef","selectedId","selectedRigionId","selectRegion","map","region","isSelected","id","points","flatMap","p","x","y","color"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,aAA5B;AAEA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,SAASC,OAAT,GAAkB;AAAA;;AAChB,MAAMC,OAAO,GAAGF,QAAQ,CAAC,UAAAG,CAAC;AAAA,WAAIA,CAAC,CAACD,OAAN;AAAA,GAAF,CAAxB;AACA,MAAME,QAAQ,GAAGP,KAAK,CAACQ,MAAN,CAAa,IAAb,CAAjB;AAEA,MAAMC,UAAU,GAAGN,QAAQ,CAAC,UAAAG,CAAC;AAAA,WAAIA,CAAC,CAACI,gBAAN;AAAA,GAAF,CAA3B;AACA,MAAMC,YAAY,GAAGR,QAAQ,CAAC,UAAAG,CAAC;AAAA,WAAIA,CAAC,CAACK,YAAN;AAAA,GAAF,CAA7B;AAEA,sBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEJ,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,CAACO,GAAR,CAAY,UAAAC,MAAM,EAAI;AACrB,QAAMC,UAAU,GAAGD,MAAM,CAACE,EAAP,KAAcN,UAAjC;AACA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,EAAEI,MAAM,CAACE,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGE,oBAAC,IAAD;AACE,MAAA,wBAAwB,EAAC,iBAD3B;AAEE,MAAA,MAAM,EAAEF,MAAM,CAACG,MAAP,CAAcC,OAAd,CAAsB,UAAAC,CAAC;AAAA,eAAI,CAACA,CAAC,CAACC,CAAH,EAAMD,CAAC,CAACE,CAAR,CAAJ;AAAA,OAAvB,CAFV;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,SAAS,EAAE,KAJb;AAKE,MAAA,MAAM,MALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAWE,oBAAC,IAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,MAAM,EAAEP,MAAM,CAACG,MAAP,CAAcC,OAAd,CAAsB,UAAAC,CAAC;AAAA,eAAI,CAACA,CAAC,CAACC,CAAH,EAAMD,CAAC,CAACE,CAAR,CAAJ;AAAA,OAAvB,CAFV;AAGE,MAAA,IAAI,EAAEP,MAAM,CAACQ,KAHf;AAIE,MAAA,MAAM,MAJR;AAKE,MAAA,OAAO,EAAEP,UAAU,GAAG,CAAH,GAAO,GAL5B;AAME,MAAA,OAAO,EAAE,mBAAM;AACbH,QAAAA,YAAY,CAACE,MAAM,CAACE,EAAR,CAAZ;AACD,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF;AAwBD,GA1BA,CADH,CADF;AA+BD;;AAAA;AACD,eAAeX,OAAf","sourcesContent":["import React from \"react\";\nimport { Layer, Line } from \"react-konva\";\n\nimport useStore from \"../store\";\n\nfunction Regions(){\n  const regions = useStore(s => s.regions);\n  const layerRef = React.useRef(null);\n\n  const selectedId = useStore(s => s.selectedRigionId);\n  const selectRegion = useStore(s => s.selectRegion);\n\n  return (\n    <Layer ref={layerRef}>\n      {regions.map(region => {\n        const isSelected = region.id === selectedId;\n        return (\n          <React.Fragment key={region.id}>\n            {/* first we need to erase previous drawings */}\n            {/* we can do it with  destination-out blend mode */}\n            <Line\n              globalCompositeOperation=\"destination-out\"\n              points={region.points.flatMap(p => [p.x, p.y])}\n              fill=\"black\"\n              listening={false}\n              closed\n            />\n            {/* then we just draw new region */}\n            <Line\n              name=\"region\"\n              points={region.points.flatMap(p => [p.x, p.y])}\n              fill={region.color}\n              closed\n              opacity={isSelected ? 1 : 0.8}\n              onClick={() => {\n                selectRegion(region.id);\n              }}\n            />\n          </React.Fragment>\n        );\n      })}\n    </Layer>\n  );\n};\nexport default Regions;\n"]},"metadata":{},"sourceType":"module"}