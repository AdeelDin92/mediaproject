{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Addy\\\\OneDrive\\\\Documents\\\\React\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Addy\\\\OneDrive\\\\Documents\\\\React\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Addy\\\\OneDrive\\\\Documents\\\\React\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Addy\\\\OneDrive\\\\Documents\\\\React\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"C:\\\\Users\\\\Addy\\\\OneDrive\\\\Documents\\\\React\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Addy\\\\OneDrive\\\\Documents\\\\React\\\\Client\\\\src\\\\components\\\\practise.js\";\n\nimport React, { Component } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Stage, Layer, Image } from 'react-konva';\nimport useImage from 'use-image'; // the first very simple and recommended way:\n\nvar LionImage = function LionImage() {\n  var _useImage = useImage('https://konvajs.org/assets/lion.png'),\n      _useImage2 = _slicedToArray(_useImage, 1),\n      image = _useImage2[0];\n\n  return /*#__PURE__*/React.createElement(Image, {\n    image: image,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 10\n    }\n  });\n}; // custom component that will handle loading image from url\n// you may add more logic here to handle \"loading\" state\n// or if loading is failed\n// VERY IMPORTANT NOTES:\n// at first we will set image state to null\n// and then we will set it to native image instance when it is loaded\n\n\nvar URLImage = /*#__PURE__*/function (_React$Component) {\n  _inherits(URLImage, _React$Component);\n\n  var _super = _createSuper(URLImage);\n\n  function URLImage() {\n    var _this2;\n\n    _classCallCheck(this, URLImage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _super.call.apply(_super, [this].concat(args));\n    _this2.state = {\n      image: null\n    };\n\n    _this2.handleLoad = function () {\n      // after setState react-konva will update canvas and redraw the layer\n      // because \"image\" property is changed\n      _this2.setState({\n        image: _this2.image\n      }); // if you keep same image object during source updates\n      // you will have to update layer manually:\n      // this.imageNode.getLayer().batchDraw();\n\n    };\n\n    return _this2;\n  }\n\n  _createClass(URLImage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadImage();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps) {\n      if (oldProps.src !== this.props.src) {\n        this.loadImage();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.image.removeEventListener('load', this.handleLoad);\n    }\n  }, {\n    key: \"loadImage\",\n    value: function loadImage() {\n      // save to \"this\" to remove \"load\" handler on unmount\n      this.image = new window.Image();\n      this.image.src = this.props.src;\n      this.image.addEventListener('load', this.handleLoad);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(Image, {\n        x: this.props.x,\n        y: this.props.y,\n        image: this.state.image,\n        ref: function ref(node) {\n          _this3.imageNode = node;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return URLImage;\n}(React.Component);\n\nvar Practise = /*#__PURE__*/function (_Component) {\n  _inherits(Practise, _Component);\n\n  var _super2 = _createSuper(Practise);\n\n  function Practise() {\n    _classCallCheck(this, Practise);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Practise, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Stage, {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Layer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(URLImage, {\n        src: \"https://konvajs.org/assets/yoda.jpg\",\n        x: 150,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(LionImage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return Practise;\n}(Component);\n\nexport default Practise;","map":{"version":3,"sources":["C:/Users/Addy/OneDrive/Documents/React/Client/src/components/practise.js"],"names":["React","Component","createRoot","Stage","Layer","Image","useImage","LionImage","image","URLImage","state","handleLoad","setState","loadImage","oldProps","src","props","removeEventListener","window","addEventListener","x","y","node","imageNode","Practise","innerWidth","innerHeight"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,KAAvB,QAAoC,aAApC;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,kBAAgBD,QAAQ,CAAC,qCAAD,CAAxB;AAAA;AAAA,MAAOE,KAAP;;AACA,sBAAO,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAHD,C,CAKA;AACA;AACA;AACA;AACA;AACA;;;IACMC,Q;;;;;;;;;;;;;;;WACJC,K,GAAQ;AACNF,MAAAA,KAAK,EAAE;AADD,K;;WAoBRG,U,GAAa,YAAM;AACjB;AACA;AACA,aAAKC,QAAL,CAAc;AACZJ,QAAAA,KAAK,EAAE,OAAKA;AADA,OAAd,EAHiB,CAMjB;AACA;AACA;;AACD,K;;;;;;;WA1BD,6BAAoB;AAClB,WAAKK,SAAL;AACD;;;WACD,4BAAmBC,QAAnB,EAA6B;AAC3B,UAAIA,QAAQ,CAACC,GAAT,KAAiB,KAAKC,KAAL,CAAWD,GAAhC,EAAqC;AACnC,aAAKF,SAAL;AACD;AACF;;;WACD,gCAAuB;AACrB,WAAKL,KAAL,CAAWS,mBAAX,CAA+B,MAA/B,EAAuC,KAAKN,UAA5C;AACD;;;WACD,qBAAY;AACV;AACA,WAAKH,KAAL,GAAa,IAAIU,MAAM,CAACb,KAAX,EAAb;AACA,WAAKG,KAAL,CAAWO,GAAX,GAAiB,KAAKC,KAAL,CAAWD,GAA5B;AACA,WAAKP,KAAL,CAAWW,gBAAX,CAA4B,MAA5B,EAAoC,KAAKR,UAAzC;AACD;;;WAWD,kBAAS;AAAA;;AACP,0BACE,oBAAC,KAAD;AACE,QAAA,CAAC,EAAE,KAAKK,KAAL,CAAWI,CADhB;AAEE,QAAA,CAAC,EAAE,KAAKJ,KAAL,CAAWK,CAFhB;AAGE,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWF,KAHpB;AAIE,QAAA,GAAG,EAAE,aAACc,IAAD,EAAU;AACb,UAAA,MAAI,CAACC,SAAL,GAAiBD,IAAjB;AACD,SANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD;;;;EA1CoBtB,KAAK,CAACC,S;;IA6CvBuB,Q;;;;;;;;;;;;;WACJ,kBAAS;AACP,0BACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEN,MAAM,CAACO,UAArB;AAAiC,QAAA,MAAM,EAAEP,MAAM,CAACQ,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAC,qCAAd;AAAoD,QAAA,CAAC,EAAE,GAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,CADF;AAQD;;;;EAVoBzB,S;;AAavB,eAAeuB,QAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { Stage, Layer, Image } from 'react-konva';\r\nimport useImage from 'use-image';\r\n\r\n// the first very simple and recommended way:\r\nconst LionImage = () => {\r\n  const [image] = useImage('https://konvajs.org/assets/lion.png');\r\n  return <Image image={image} />;\r\n};\r\n\r\n// custom component that will handle loading image from url\r\n// you may add more logic here to handle \"loading\" state\r\n// or if loading is failed\r\n// VERY IMPORTANT NOTES:\r\n// at first we will set image state to null\r\n// and then we will set it to native image instance when it is loaded\r\nclass URLImage extends React.Component {\r\n  state = {\r\n    image: null,\r\n  };\r\n  componentDidMount() {\r\n    this.loadImage();\r\n  }\r\n  componentDidUpdate(oldProps) {\r\n    if (oldProps.src !== this.props.src) {\r\n      this.loadImage();\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.image.removeEventListener('load', this.handleLoad);\r\n  }\r\n  loadImage() {\r\n    // save to \"this\" to remove \"load\" handler on unmount\r\n    this.image = new window.Image();\r\n    this.image.src = this.props.src;\r\n    this.image.addEventListener('load', this.handleLoad);\r\n  }\r\n  handleLoad = () => {\r\n    // after setState react-konva will update canvas and redraw the layer\r\n    // because \"image\" property is changed\r\n    this.setState({\r\n      image: this.image,\r\n    });\r\n    // if you keep same image object during source updates\r\n    // you will have to update layer manually:\r\n    // this.imageNode.getLayer().batchDraw();\r\n  };\r\n  render() {\r\n    return (\r\n      <Image\r\n        x={this.props.x}\r\n        y={this.props.y}\r\n        image={this.state.image}\r\n        ref={(node) => {\r\n          this.imageNode = node;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass Practise extends Component {\r\n  render() {\r\n    return (\r\n      <Stage width={window.innerWidth} height={window.innerHeight}>\r\n        <Layer>\r\n          <URLImage src=\"https://konvajs.org/assets/yoda.jpg\" x={150} />\r\n          <LionImage />\r\n        </Layer>\r\n      </Stage>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Practise;"]},"metadata":{},"sourceType":"module"}