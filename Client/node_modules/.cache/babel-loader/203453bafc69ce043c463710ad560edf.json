{"ast":null,"code":"import { useRef, useReducer, useEffect, useLayoutEffect } from 'react';\n\nvar forceUpdateReducer = function forceUpdateReducer(state) {\n  return state + 1;\n}; // For server-side rendering: https://github.com/react-spring/zustand/pull/34\n\n\nvar useIsoLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\n\nfunction create(createState) {\n  var state;\n  var listeners = new Set();\n\n  var setState = function setState(partial) {\n    var partialState = typeof partial === 'function' ? partial(state) : partial;\n\n    if (partialState !== state) {\n      state = Object.assign({}, state, partialState);\n      listeners.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n\n  var getState = function getState() {\n    return state;\n  };\n\n  var subscribe = function subscribe(listener) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!('currentSlice' in options)) {\n      options.currentSlice = (options.selector || getState)(state);\n    }\n\n    var listenerFn = function listenerFn() {\n      // Destructure in the listener to get current values. We rely on this\n      // because options is mutated in useStore.\n      var _options$selector = options.selector,\n          selector = _options$selector === void 0 ? getState : _options$selector,\n          _options$equalityFn = options.equalityFn,\n          equalityFn = _options$equalityFn === void 0 ? Object.is : _options$equalityFn; // Selector or equality function could throw but we don't want to stop\n      // the listener from being called.\n      // https://github.com/react-spring/zustand/pull/37\n\n      try {\n        var newStateSlice = selector(state);\n\n        if (!equalityFn(options.currentSlice, newStateSlice)) {\n          listener(options.currentSlice = newStateSlice);\n        }\n      } catch (error) {\n        options.subscribeError = error;\n        listener();\n      }\n    };\n\n    listeners.add(listenerFn);\n    return function () {\n      return void listeners.delete(listenerFn);\n    };\n  };\n\n  var destroy = function destroy() {\n    return listeners.clear();\n  };\n\n  var useStore = function useStore() {\n    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getState;\n    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.is;\n\n    if (Array.isArray(equalityFn)) {\n      equalityFn = Object.is;\n      console.warn('Zustand: the 2nd arg for dependencies was deprecated in 1.0. Please remove it! See: https://github.com/react-spring/zustand#selecting-multiple-state-slices');\n    }\n\n    var isInitial = useRef(true);\n    var options = useRef( // isInitial prevents the selector from being called every render.\n    isInitial.current && {\n      selector: selector,\n      equalityFn: equalityFn,\n      currentSlice: (isInitial.current = false, selector(state))\n    }).current; // Update state slice if selector has changed or subscriber errored.\n\n    if (selector !== options.selector || options.subscribeError) {\n      var newStateSlice = selector(state);\n\n      if (!equalityFn(options.currentSlice, newStateSlice)) {\n        options.currentSlice = newStateSlice;\n      }\n    }\n\n    useIsoLayoutEffect(function () {\n      options.selector = selector;\n      options.equalityFn = equalityFn;\n      options.subscribeError = undefined;\n    });\n    var forceUpdate = useReducer(forceUpdateReducer, 1)[1];\n    useIsoLayoutEffect(function () {\n      return subscribe(forceUpdate, options);\n    }, []);\n    return options.currentSlice;\n  };\n\n  var api = {\n    setState: setState,\n    getState: getState,\n    subscribe: subscribe,\n    destroy: destroy\n  };\n  state = createState(setState, getState, api);\n  return [useStore, api];\n}\n\nexport default create;\nexport { create };","map":null,"metadata":{},"sourceType":"module"}