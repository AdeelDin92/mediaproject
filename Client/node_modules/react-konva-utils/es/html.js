var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import ReactDOM from "react-dom";;
import { Group } from 'react-konva';
const needForceStyle = (el) => {
    const pos = window.getComputedStyle(el).position;
    const ok = pos === 'absolute' || pos === 'relative';
    return !ok;
};
export const Html = ({ children, groupProps, divProps, transform, transformFunc, }) => {
    const groupRef = React.useRef(null);
    const container = React.useRef();
    const [div] = React.useState(() => document.createElement('div'));
    const root = React.useMemo(() => ReactDOM.createRoot(div), [div]);
    const shouldTransform = transform !== null && transform !== void 0 ? transform : true;
   
   
    React.useLayoutEffect(() => {
        
    }, [divProps]);
    React.useLayoutEffect(() => {
        root.render(children);
    });
    React.useEffect(() => {
        return () => {
            root.unmount();
        };
    }, []);
    return React.createElement(Group, Object.assign({ ref: groupRef }, groupProps));
};
