const redux = (reducer, initial) => (set, get, api) => {
  api.dispatch = action => {
    set(state => reducer(state, action));
    api.devtools && api.devtools.send(api.devtools.prefix + action.type, get());
    return action;
  };

  return {
    dispatch: api.dispatch,
    ...initial
  };
};

const devtools = (fn, prefix) => (set, get, api) => {
  let extension;

  try {
    extension = window.__REDUX_DEVTOOLS_EXTENSION__ || window.top.__REDUX_DEVTOOLS_EXTENSION__;
  } catch {}

  let ignoreState = false;

  if (!extension) {
    console.warn('Please install/enable Redux devtools extension');
    api.devtools = null;
    return fn(set, get, api);
  } else {
    const initialState = fn(set, get, api);

    if (!api.devtools) {
      api.devtools = extension.connect();
      api.devtools.prefix = prefix ? `${prefix} > ` : '';
      api.devtools.subscribe(message => {
        if (message.type === 'DISPATCH' && message.state) {
          ignoreState = message.payload.type === 'JUMP_TO_ACTION' || message.payload.type === 'JUMP_TO_STATE';
          set(JSON.parse(message.state), true);
        }
      });
      api.devtools.init(initialState);

      if (!initialState.dispatch) {
        api.subscribe(state => {
          if (!ignoreState) {
            api.devtools.send(api.devtools.prefix + 'setState', state);
          } else {
            ignoreState = false;
          }
        });
      }
    }

    return initialState;
  }
};

export { devtools, redux };
