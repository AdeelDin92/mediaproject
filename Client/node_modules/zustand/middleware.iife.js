var middleware = (function (exports) {
  'use strict';

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  var redux = function redux(reducer, initial) {
    return function (set, get, api) {
      api.dispatch = function (action) {
        set(function (state) {
          return reducer(state, action);
        });
        api.devtools && api.devtools.send(api.devtools.prefix + action.type, get());
        return action;
      };

      return _extends({
        dispatch: api.dispatch
      }, initial);
    };
  };

  var devtools = function devtools(fn, prefix) {
    return function (set, get, api) {
      var extension;

      try {
        extension = window.__REDUX_DEVTOOLS_EXTENSION__ || window.top.__REDUX_DEVTOOLS_EXTENSION__;
      } catch (_unused) {}

      var ignoreState = false;

      if (!extension) {
        console.warn('Please install/enable Redux devtools extension');
        api.devtools = null;
        return fn(set, get, api);
      } else {
        var initialState = fn(set, get, api);

        if (!api.devtools) {
          api.devtools = extension.connect();
          api.devtools.prefix = prefix ? prefix + " > " : '';
          api.devtools.subscribe(function (message) {
            if (message.type === 'DISPATCH' && message.state) {
              ignoreState = message.payload.type === 'JUMP_TO_ACTION' || message.payload.type === 'JUMP_TO_STATE';
              set(JSON.parse(message.state), true);
            }
          });
          api.devtools.init(initialState);

          if (!initialState.dispatch) {
            api.subscribe(function (state) {
              if (!ignoreState) {
                api.devtools.send(api.devtools.prefix + 'setState', state);
              } else {
                ignoreState = false;
              }
            });
          }
        }

        return initialState;
      }
    };
  };

  exports.devtools = devtools;
  exports.redux = redux;

  return exports;

}({}));
